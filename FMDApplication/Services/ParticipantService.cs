using FMDApplication.Dtos;
using FMDApplication.Dtos.Participant;
using FMDApplication.Response;
using FMDCore.Interfaces;
using FMDInfra.Models;

namespace FMDApplication.Services
{
    public class ParticipantService : IParticipantService
    {
        private readonly IParticipantRepository _repository;

        public ParticipantService(IParticipantRepository repository)
        {
            _repository = repository;
        }

        public async Task<ApiResponse<UpdateParticipantOutputDto>> UpdateAsync(Guid id, UpdateParticipantInputDto dto)
        {
            var participant = new Participant
            {
                Id = id,
                Name = dto.Name,
                Email = dto.Email,
                Phone = dto.Phone,
                LectureId = dto.LectureId
            };

            var updated = await _repository.UpdateAsync(participant);

            if (updated == null)
                return new ApiResponse<UpdateParticipantOutputDto>(null, false, "Participant not found");

            var output = new UpdateParticipantOutputDto
            {
                Id = updated.Id,
                Name = updated.Name,
                Email = updated.Email,
                Phone = updated.Phone,
                LectureId = updated.LectureId
            };

            return new ApiResponse<UpdateParticipantOutputDto>(output, true, "Participant updated successfully");
        }

        public async Task<ApiResponse<bool>> DeleteAsync(Guid id)
        {
            var deleted = await _repository.DeleteAsync(id);

            return !deleted ? new ApiResponse<bool>(false, false, "Participant not found")
                            : new ApiResponse<bool>(true, true, "Participant deleted successfully");
        }


        public async Task<ApiResponse<CreateParticipantOutputDto>> AddAsync(CreateParticipantInputDto dto)
        {
            var participant = await _repository.AddAsync(new Participant
            {
                LectureId = dto.LectureId,
                Name = dto.Name,
                Email = dto.Email,
                Phone = dto.Phone,
            });

            if (participant is null)
                return new ApiResponse<CreateParticipantOutputDto>(null, false, "Lecture was not found");

            var output = new CreateParticipantOutputDto
            {
                Id = participant.Id, // Assuming Id is generated by the repository
                LectureId = participant.LectureId,
                Name = dto.Name,
                Email = dto.Email,
                Phone = dto.Phone
            };

            return new ApiResponse<CreateParticipantOutputDto>(output, true, "Participant created successfully");
        }

        public async Task<ApiResponse<IEnumerable<GetAllParticipantDto>>> GetAllAsync()
        {
            var particpants = await _repository.GetAllAsync();

            return new ApiResponse<IEnumerable<GetAllParticipantDto>>(
                particpants.Select(p => new GetAllParticipantDto
                {
                    Id = p.Id,
                    Name = p.Name,
                    Email = p.Email,
                    Phone = p.Phone,
                    LectureId = p.LectureId
                }), true, "Participants retrieved successfully");
        }
    }
}
